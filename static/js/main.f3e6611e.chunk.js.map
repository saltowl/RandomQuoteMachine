{"version":3,"sources":["components/QuoteBox.js","App.js","redux/reducers.js","serviceWorker.js","index.js"],"names":["QuoteBox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getQuote","bind","assertThisInitialized","parseQuote","url","Math","floor","random","callback","request","XMLHttpRequest","onreadystatechange","readyState","status","response","open","withCredentials","send","data","post","JSON","parse","loadNewQuote","content","title","react_default","a","createElement","id","className","target","href","rel","onClick","dangerouslySetInnerHTML","__html","quote","author","React","Component","App","components_QuoteBox","NEW_QUOTE","INITIAL_STATE","reducers","combineReducers","rootReducer","state","arguments","length","undefined","action","type","newState","assign","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunk","Container","connect","dispatch","newQuote","ReactDOM","render","es","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3e6611e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass QuoteBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.getQuote = this.getQuote.bind(this);\r\n        this.parseQuote = this.parseQuote.bind(this);\r\n\r\n        this.getQuote();\r\n    }\r\n    getQuote() {\r\n        let url = 'https://quotesondesign.com/wp-json/posts?filter[orderby]=rand&filter[posts_per_page]=' + Math.floor((Math.random() * 20) + 1);\r\n        const callback = this.parseQuote;\r\n\r\n        let request = new XMLHttpRequest();\r\n        request.onreadystatechange = function() {\r\n            if (request.readyState === 4 && request.status === 200) {\r\n                callback(request.response); // Another callback here\r\n            }\r\n        };\r\n        request.open('GET', url);\r\n        request.withCredentials = true;\r\n        request.send();\r\n    };\r\n    parseQuote(data) {\r\n        let post = JSON.parse(data)[0];\r\n        this.props.loadNewQuote(post.content, post.title);\r\n    }\r\n    render() {\r\n        return (\r\n            <div id={'quote-box'} className={'card card-light w-75'}>\r\n                <div id={'buttons'}>\r\n                    <a className=\"btn btn-secondary\" id=\"tweet-quote\" title=\"Tweet this quote!\" target=\"_blank\" href=\"https://twitter.com/intent/tweet\" rel=\"noopener noreferrer \">\r\n                        <i className=\"fa fa-twitter\" />\r\n                    </a>\r\n                    <button id={'new-quote'} className={'btn btn-secondary'} onClick={this.getQuote}>New quote</button>\r\n                </div>\r\n                <div id={'text'} dangerouslySetInnerHTML={{ __html: this.props.quote }} />\r\n                <div id={'author'} className={'card-text text-right font-italic'}>{this.props.author}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuoteBox;","import React from 'react';\nimport './App.css';\nimport QuoteBox from './components/QuoteBox'\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div id={'wrapper'} className={'container'}>\n                <div className={'row'}>\n                    <QuoteBox quote={this.props.quote} author={this.props.author} loadNewQuote={this.props.loadNewQuote}/>\n                </div>\n                <div id={'sign'} className={'text-center'}>by saltowl</div>\n            </div>\n        );\n    };\n}\n\nexport default App;\n","import {combineReducers} from 'redux';\r\n\r\nconst NEW_QUOTE = 'NEW_QUOTE';\r\nconst INITIAL_STATE = {'quote': '', 'author': ''};\r\n\r\nfunction rootReducer(state = INITIAL_STATE, action = {'type': 'default'}) {\r\n    switch(action.type) {\r\n        case NEW_QUOTE:\r\n            let newState = Object.assign({}, state);\r\n            newState.quote = action.quote;\r\n            newState.author = action.author;\r\n            return newState;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst reducers =  combineReducers({\r\n    rootReducer\r\n});\r\n\r\nexport default reducers;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider, connect } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport reducers from './redux/reducers';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst INITIAL_STATE = {'rootReducer': {}};\n\nconst store = createStore(\n  reducers,\n  INITIAL_STATE,\n  applyMiddleware(thunk)\n);\n\nconst NEW_QUOTE = 'NEW_QUOTE';\nconst newQuote = (quote, author) => {\n    return {\n        type: NEW_QUOTE,\n        quote: quote,\n        author: author\n    }\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        quote: state.rootReducer.quote,\n        author: state.rootReducer.author\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        loadNewQuote: (quote, author) => {\n            dispatch(newQuote(quote, author))\n        }\n    }\n};\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(App);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Container />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}